#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed Jan  2 13:29:33 2013"
echo "(version 3.36, October 17, 2012)"

# execute via : 
#   tcsh -xef /home/despo/cgratton/data/FaceSpace_loc/Scripts/SS2_faceattend_highRES.afni_proc_respprd_STC_blur.script |& tee output./home/despo/cgratton/data/FaceSpace_loc/Scripts/SS2_faceattend_highRES.afni_proc_respprd_STC_blur.script

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 8 May 2012
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 8 May 2012)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = SS2
endif

# assign output directory name
set output_dir = /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/afni_proc_respprd_STC_blur

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 7`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp                                                                                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/Behavior/faceattend/resp_period/SS2_all.1D \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy                                                                                       \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-T1+orig \
    $output_dir/SS2-T1

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-001+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-002+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-003+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-004+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-005+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-006+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r07.tcat                              \
    /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-007+orig'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 150 150 150 150 150 150 150 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 3 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    3dTshift -tzero 0 -quintic -prefix pb01.$subj.r$run.tshift \
             pb00.$subj.r$run.tcat+orig
end

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, SS2-T1_strip+orig)
align_epi_anat.py -anat2epi -anat SS2-T1+orig              \
       -save_orig_skullstrip SS2-T1_strip -suffix _al_junk \
       -epi pb01.$subj.r01.tshift+orig -epi_base 0         \
       -giant_move -epi2anat -save_skullstrip              \
       -volreg off -tshift off

# ================================= volreg =================================
# align each dset to base volume, align to anat

# create an all-1 dataset to mask the extents of the warp
3dcalc -a pb01.$subj.r01.tshift+orig -expr 1 -prefix rm.epi.all1

# register and warp
foreach run ( $runs )
    # register each volume to the base
    3dvolreg -verbose -zpad 1 -base pb01.$subj.r01.tshift+orig'[0]' \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run     \
             -cubic                                                 \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                   \
             pb01.$subj.r$run.tshift+orig

    # catenate volreg and epi2anat transformations
    cat_matvec -ONELINE                                             \
               SS2-T1_al_junk_mat.aff12.1D -I                       \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform : volreg and epi2anat
    3dAllineate -base SS2-T1_strip+orig                             \
                -input pb01.$subj.r$run.tshift+orig                 \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D             \
                -mast_dxyz 2                                        \
                -prefix rm.epi.nomask.r$run 

    # warp the all-1 dataset for extents masking 
    3dAllineate -base SS2-T1_strip+orig                             \
                -input rm.epi.all1+orig                             \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D             \
                -mast_dxyz 2 -final NN -quiet                       \
                -prefix rm.epi.1.r$run 

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+orig
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# compute motion magnitude time series: the Euclidean norm
# (sqrt(sum squares)) of the motion parameter derivatives
1d_tool.py -infile dfile_rall.1D -set_nruns 7                       \
           -derivative  -collapse_cols euclidean_norm               \
           -write motion_${subj}_enorm.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+orig
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+orig -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+orig -b mask_epi_extents+orig     \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# create an anat_final dataset, aligned with stats
3dcopy SS2-T1_strip+orig anat_final.$subj

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
    3dmerge -1blur_fwhm 4.0 -doall -prefix pb03.$subj.r$run.blur \
            pb02.$subj.r$run.volreg+orig
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 1 -prefix rm.mask_r$run pb03.$subj.r$run.blur+orig
end

# get mean and compare it to 0 for taking 'union'
3dMean -datum short -prefix rm.mean rm.mask*.HEAD
3dcalc -a rm.mean+orig -expr 'ispositive(a-0)' -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+orig ----
#      (resampled from aligned anat)
3dresample -master full_mask.$subj+orig -input SS2-T1_strip+orig     \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig \
            -prefix mask_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+orig mask_anat.$subj+orig   \
            |& tee out.mask_overlap.txt

# ---- segment anatomy into classes CSF/GM/WM ----
3dSeg -anat anat_final.$subj+orig -mask AUTO -classes 'CSF ; GM ; WM'

# copy resulting Classes dataset to current directory
3dcopy Segsy/Classes+orig .

# resample to match EPI data grid
3dresample -master pb03.$subj.r01.blur+orig -input Classes+orig      \
           -prefix Classes_resam

# and copy label table
3drefit -copytables Classes+orig Classes_resam+orig

# ================================ regress =================================

# create -stim_times files
make_stim_times.py -prefix stim_times -tr 2.0 -nruns 7 -nt 150          \
                   -files stimuli/SS2_all.1D 


# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 7                           \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 7                           \
           -derivative -demean -write motion_deriv.1D

# create 2 ROI regressors: brain, GM, CSF, WM
foreach run ( $runs )
    3dmaskave -quiet -mask Classes_resam+orig"<WM>"                     \
        pb02.$subj.r$run.volreg+orig > rm.ROI.WM.r$run.1D
    3dmaskave -quiet -mask Classes_resam+orig"<CSF>"                    \
        pb02.$subj.r$run.volreg+orig > rm.ROI.CSF.r$run.1D
end
cat rm.ROI.WM.r*.1D > ROI.WM_rall.1D
cat rm.ROI.CSF.r*.1D > ROI.CSF_rall.1D

# run the regression analysis
3dDeconvolve -input pb03.$subj.r*.blur+orig.HEAD                        \
    -mask full_mask.$subj+orig                                          \
    -ortvec ROI.WM_rall.1D ROI.WM                                       \
    -ortvec ROI.CSF_rall.1D ROI.CSF                                     \
    -polort 3                                                           \
    -num_stimts 10                                                      \
    -stim_times 1 stimuli/stim_times.01.1D 'BLOCK(5,1)'                 \
    -stim_label 1 ATTface1                                              \
    -stim_times 2 stimuli/stim_times.02.1D 'BLOCK(5,1)'                 \
    -stim_label 2 ATTface2                                              \
    -stim_times 3 stimuli/stim_times.03.1D 'BLOCK(5,1)'                 \
    -stim_label 3 fix                                                   \
    -stim_times 4 stimuli/stim_times.04.1D 'BLOCK(1,1)'                 \
    -stim_label 4 resp                                                  \
    -stim_file 5 motion_demean.1D'[0]' -stim_base 5 -stim_label 5 roll  \
    -stim_file 6 motion_demean.1D'[1]' -stim_base 6 -stim_label 6 pitch \
    -stim_file 7 motion_demean.1D'[2]' -stim_base 7 -stim_label 7 yaw   \
    -stim_file 8 motion_demean.1D'[3]' -stim_base 8 -stim_label 8 dS    \
    -stim_file 9 motion_demean.1D'[4]' -stim_base 9 -stim_label 9 dL    \
    -stim_file 10 motion_demean.1D'[5]' -stim_base 10 -stim_label 10 dP \
    -gltsym 'SYM: +ATTface1 +ATTface2  -fix'                            \
    -glt_label 1 stim_vs_base                                           \
    -gltsym 'SYM: +ATTface1 -fix'                                       \
    -glt_label 2 ATTface1_vs_fix                                        \
    -gltsym 'SYM: +ATTface2 -fix'                                       \
    -glt_label 3 ATTface2_vs_fix                                        \
    -gltsym 'SYM: +ATTface1 -ATTface2'                                  \
    -glt_label 4 ATTface1_vs_ATTface2                                   \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                             \
    -fitts fitts.$subj                                                  \
    -errts errts.${subj}                                                \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pariwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb03.$subj.r*.blur+orig.HEAD

# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+orig
3dTstat -stdev -prefix rm.noise.all errts.${subj}+orig
3dcalc -a rm.signal.all+orig                                            \
       -b rm.noise.all+orig                                             \
       -c full_mask.$subj+orig                                          \
       -expr 'c*a/b' -prefix TSNR.$subj 

# create ideal files for fixed response stim types
1dcat X.xmat.1D'[28]' > ideal_ATTface1.1D
1dcat X.xmat.1D'[29]' > ideal_ATTface2.1D
1dcat X.xmat.1D'[30]' > ideal_fix.1D
1dcat X.xmat.1D'[31]' > ideal_resp.1D

# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# -- estimate blur for each run in epits --
touch blur.epits.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( $tr_counts )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+orig                         \
        all_runs.$subj+orig"[$b0..$b1]" >> blur.epits.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D\'` )
echo average epits blurs: $blurs
echo "$blurs   # epits blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in errts --
touch blur.errts.1D

set b0 = 0     # first index for current run
set b1 = -1    # will be last index for current run
foreach reps ( $tr_counts )
    @ b1 += $reps  # last index for current run
    3dFWHMx -detrend -mask full_mask.$subj+orig                         \
        errts.${subj}+orig"[$b0..$b1]" >> blur.errts.1D
    @ b0 += $reps  # first index for next run
end

# compute average blur and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D\'` )
echo average errts blurs: $blurs
echo "$blurs   # errts blur estimates" >> blur_est.$subj.1D


# add 3dClustSim results as attributes to the stats dset
set fxyz = ( `tail -1 blur_est.$subj.1D` )
3dClustSim -both -NN 123 -mask full_mask.$subj+orig                     \
           -fwhmxyz $fxyz[1-3] -prefix ClustSim
3drefit -atrstring AFNI_CLUSTSIM_MASK file:ClustSim.mask                \
        -atrstring AFNI_CLUSTSIM_NN1  file:ClustSim.NN1.niml            \
        -atrstring AFNI_CLUSTSIM_NN2  file:ClustSim.NN2.niml            \
        -atrstring AFNI_CLUSTSIM_NN3  file:ClustSim.NN3.niml            \
        stats.$subj+orig


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -exit0

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -fr rm.* Segsy

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -dsets                                                                                          \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-001+orig.HEAD       \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-002+orig.HEAD       \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-003+orig.HEAD       \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-004+orig.HEAD       \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-005+orig.HEAD       \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-006+orig.HEAD       \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-EPI-007+orig.HEAD       \
#     -copy_anat                                                                                               \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/SS2-T1+orig.HEAD            \
#     -out_dir                                                                                                 \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/faceattend_highRES/Analysis/afni_proc_respprd_STC_blur  \
#     -script                                                                                                  \
#     /home/despo/cgratton/data/FaceSpace_loc/Scripts/SS2_faceattend_highRES.afni_proc_respprd_STC_blur.script \
#     -subj_id SS2 -scr_overwrite -blocks tshift align volreg blur mask                                        \
#     regress -align_opts_aea -giant_move -epi2anat -save_skullstrip                                           \
#     -volreg_align_to first -volreg_align_e2a -mask_segment_anat yes                                          \
#     -mask_apply epi -regress_ROI WM CSF -regress_stim_files                                                  \
#     /home/despo/cgratton/data/FaceSpace_loc/Data/SS2/Behavior/faceattend/resp_period/SS2_all.1D              \
#     -regress_stim_labels ATTface1 ATTface2 fix resp -regress_est_blur_epits                                  \
#     -regress_est_blur_errts -regress_basis 'BLOCK(1,1)' -regress_opts_3dD                                    \
#     -gltsym 'SYM: +ATTface1 +ATTface2  -fix' -glt_label 1 stim_vs_base                                       \
#     -gltsym 'SYM: +ATTface1 -fix' -glt_label 2 ATTface1_vs_fix -gltsym                                       \
#     'SYM: +ATTface2 -fix' -glt_label 3 ATTface2_vs_fix -gltsym 'SYM:                                         \
#     +ATTface1 -ATTface2' -glt_label 4 ATTface1_vs_ATTface2
